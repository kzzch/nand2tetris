// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

     PARTS:
    // Put your code here.
	/**
	 * Decoder: Decodes the instruction and routes the control bits
	 * to the various parts of the CPU
	 * A compute instruction is broken down as follows:
	 * i xx a cccccc ddd jjj
	 * a: determines wether the ALU will operate on the A register input or 
	 *    on the Memory input
	 * c: determines which function the ALU will compute
	 * d: enable various locations to accept the ALU result
		  d1: A Register load bit
		  d2: D Register Load Bit
		  d3: WriteM
	 * j: encode jump directives
	 *
	 */
	
	// Decode logic
	And(a = instruction[15], b = true, out = cBit);
	And(a = instruction[12], b = cBit, out = aBit);
	Not(in = cBit, out = aInstruction);
	And(a = instruction[5], b = cBit, out = d1);
	And(a = instruction[4], b = cBit, out = d2);
	And(a = instruction[3], b = cBit, out = writeM);	// d3
	And(a = instruction[11], b = cBit, out = c1);
	And(a = instruction[10], b = cBit, out = c2);
	And(a = instruction[9], b = cBit, out = c3);
	And(a = instruction[8], b = cBit, out = c4);
	And(a = instruction[7], b = cBit, out = c5);
	And(a = instruction[6], b = cBit, out = c6);
	And(a = instruction[2], b = cBit, out = j1);
	And(a = instruction[1], b = cBit, out = j2);
	And(a = instruction[0], b = cBit, out = j3);
	
	/**
	 * Jump Control Logic
	 * j1 j2 j3
	 *  0  0  0 	null	no jump
	 *  0  0  1     JGT 	out > 0 jump
	 *  0  1  0     JEQ     out = 0 jump
	 *  0  1  1     JGE		out >= 0 jump
	 *  1  0  0     JLT		out < 0
	 *  1  0  1     JNE		out /= 0
	 *  1  1  0     JLE		out <= 0 jump
	 *  1  1  1     JMP		unconditional jump
	 */

	// JGT
	Or(a = zrOut, b = ngOut, out = le);
	Not(in = le, out = gt);
	And(a = gt, b = j3, out = JGT);
	
	// JEQ
	And(a = j2, b = zrOut, out = JEQ);
	
	// JGE
	And(a = JEQ, b = JGT, out = JGE);
	
	// JLT
	And(a = ngOut, b = j1, out = JLT);
	
	// JNE
	Not(in = zrOut, out = nzOut);
	And(a = j1, b = j3, out = jne0);
	And(a = jne0, b = nzOut, out = JNE);
	
	// JLE
	And(a = JLT, b = JEQ, out = JLE);
	
	// JMP
	And(a = j1, b = j2, out = jmp0);
	And(a = jmp0, b = j3, out = JMP);
	
	Or8Way(
	in[0] = JGT,
	in[1] = JEQ,
	in[2] = JGE,
	in[3] = JLT,
	in[4] = JNE,
	in[5] = JLE,
	in[6] = JMP,
	in[7] = false, out = jumpEnableBit);
	
	/**
	 * Mux 0
	 * Chooses between instruction[16] and outM to feed into the A Register
	 */
	Mux16(a = instruction, b = dRegisterIn, sel = cBit, out = aRegisterIn);
	 
	/**
	 * A Register...
	 * Register(
	 * input: in[16], load
	 * output: out[16]
	 *
	 */
	
    // A Register Control Bit
	Or(a = d1, b = aInstruction, out = regACtrlBit);
	ARegister(in = aRegisterIn, load = regACtrlBit, out = aRegisterOut, out[0..14] = addressM);
	
	/**
	 * D Register
	 * Loaded from the ALU output
	 *
	 */
	
	DRegister(in = dRegisterIn, load = d2, out = dRegisterOut);
	
	/**
	 * Mux 1
	 * Chooses between the output of the A Register and inM and feeds the
	 * result into the A/M line of the ALU
	 */
	 
	Mux16(a = aRegisterOut, b = inM, sel = aBit, out = AMLine);
	
	/**
	 * ALU:
	 * 
	IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if f == 1) or out = x & y (if == 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise
	*/
	
	ALU(x = dRegisterOut, y = AMLine,
	zx = c1,
	nx = c2,
	zy = c3,
	ny = c4,
	f = c5,
	no = c6,
	
	out = outM, out = dRegisterIn, zr = zrOut, ng = ngOut);

	// PC(in[16], load, inc, reset, out[16]);
	PC(in = aRegisterOut, load = jumpEnableBit, inc = true, reset = reset, out[0..14] = pc);
	
}